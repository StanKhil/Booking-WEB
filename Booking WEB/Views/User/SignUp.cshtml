@model Booking_WEB.Models.User.UserSignupPageModel
@{
	ViewData["Title"] = "SignUp";
}

@{
	String classAddon = "";
	String? errorMessage = null;
}

<div class="container">
	<div class="d-flex justify-content-center">
		<div class="mt-5">
			<h4>Sign in or create an account</h4>
			<p>You can sign in using your Booking.com account to access out services.</p>
			<form action="/User/Register" method="post" enctype="application/x-www-form-urlencoded">
				<div class="mb-3">
					@{
						classAddon = Model.FormErrors == null ? ""
						: (Model.FormErrors.ContainsKey("UserName")) ? "is-invalid" : "is-valid";
						errorMessage = null;
						Model.FormErrors?.TryGetValue("UserName", out errorMessage);
					}
					<label for="user-name" class="form-label">Name</label>
					<input type="text" name="user-name" value="@Model.FormModel?.UserName" class="form-control @classAddon" id="user-name" aria-describedby="Name" placeholder="Enter your name">
					<div class="invalid-feedback">@errorMessage</div>
				</div>
				<div class="mb-3">
					@{
						classAddon = Model.FormErrors == null ? ""
						: (Model.FormErrors.ContainsKey("UserEmail")) ? "is-invalid" : "is-valid";
						errorMessage = null;
						Model.FormErrors?.TryGetValue("UserEmail", out errorMessage);
					}
					<label for="user-email" class="form-label">Email address</label>
					<input type="email" name="user-email" value="@Model.FormModel?.UserEmail" class="form-control @classAddon" id="user-email" aria-describedby="Email" placeholder="Enter your email address">
					<div class="invalid-feedback">@errorMessage</div>
				</div>
				<div class="mb-3">
					@{
						classAddon = Model.FormErrors == null ? ""
						: (Model.FormErrors.ContainsKey("UserLogin")) ? "is-invalid" : "is-valid";
						errorMessage = null;
						Model.FormErrors?.TryGetValue("UserLogin", out errorMessage);
					}
					<label for="user-login" class="form-label">Login</label>
					<input type="text" name="user-login" value="@Model.FormModel?.UserLogin" class="form-control @classAddon" id="user-login" aria-describedby="Login" placeholder="Enter your login">
					<div class="invalid-feedback">@errorMessage</div>
				</div>
				<div class="mb-3">
					@{
						classAddon = Model.FormErrors == null ? ""
						: (Model.FormErrors.ContainsKey("Birthdate")) ? "is-invalid" : "is-valid";
						errorMessage = null;
						Model.FormErrors?.TryGetValue("Birthdate", out errorMessage);
					}
					<label for="user-birthdate" class="form-label">Date of birth</label>
					<input type="date" name="birthdate" value="@Model.FormModel?.Birthdate" class="form-control @classAddon" id="user-birthdate" aria-describedby="Birthdate" placeholder="Enter your birthdate">
					<div class="invalid-feedback">@errorMessage</div>
				</div>
				<div class="mb-3">
					@{
						classAddon = Model.FormErrors == null ? ""
						: (Model.FormErrors.ContainsKey("UserPassword")) ? "is-invalid" : "is-valid";
						errorMessage = null;
						Model.FormErrors?.TryGetValue("UserPassword", out errorMessage);
					}
					<label for="user-password" class="form-label">Password</label>
					<input type="password" name="user-password" value="@Model.FormModel?.UserPassword" class="form-control @classAddon" id="user-password" aria-describedby="Password" placeholder="Enter your password">
					<div class="invalid-feedback">@errorMessage</div>
				</div>
				<div class="mb-3">
					@{
						classAddon = Model.FormErrors == null ? ""
						: (Model.FormErrors.ContainsKey("UserRepeat")) ? "is-invalid" : "is-valid";
						errorMessage = null;
						Model.FormErrors?.TryGetValue("UserRepeat", out errorMessage);
					}
					<label for="user-repeat" class="form-label">Repeat Password</label>
					<input type="password" name="user-repeat" value="@Model.FormModel?.UserRepeat" class="form-control @classAddon" id="user-repeat" aria-describedby="Repeat Password" placeholder="Repeat your password">
					<div class="invalid-feedback">@errorMessage</div>
				</div>
				<div class="form-check mb-3">
					@{
						classAddon = Model.FormErrors == null ? ""
						: (Model.FormErrors.ContainsKey("UserEmail")) ? "is-invalid" : "is-valid";
						errorMessage = null;
						Model.FormErrors?.TryGetValue("UserEmail", out errorMessage);
					}
					<input name="agree" value="@Model.FormModel?.Agree" class="form-check-input @classAddon" type="checkbox" value="" id="checkDefault">
					<label class="form-check-label" for="checkDefault">
						I agree with policies
					</label>
					<div class="invalid-feedback">@errorMessage</div>
				</div>
				<button value="send" type="submit" class="btn btn-primary continue-button">Continue</button>
			</form>
			
		</div>
	</div>
</div>